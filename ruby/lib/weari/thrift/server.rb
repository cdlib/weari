#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'weari/thrift/weari_types'

        module Weari
          module Thrift
            module Server
              class Client
                include ::Thrift::Client

                def index(solr, filter, arcs, extraId, extraFields)
                  send_index(solr, filter, arcs, extraId, extraFields)
                  recv_index()
                end

                def send_index(solr, filter, arcs, extraId, extraFields)
                  send_message('index', Index_args, :solr => solr, :filter => filter, :arcs => arcs, :extraId => extraId, :extraFields => extraFields)
                end

                def recv_index()
                  result = receive_message(Index_result)
                  raise result.ex1 unless result.ex1.nil?
                  raise result.ex2 unless result.ex2.nil?
                  raise result.ex3 unless result.ex3.nil?
                  return
                end

                def clearMergeManager(managerId)
                  send_clearMergeManager(managerId)
                  recv_clearMergeManager()
                end

                def send_clearMergeManager(managerId)
                  send_message('clearMergeManager', ClearMergeManager_args, :managerId => managerId)
                end

                def recv_clearMergeManager()
                  result = receive_message(ClearMergeManager_result)
                  return
                end

                def unindex(solr, arcs, extraId)
                  send_unindex(solr, arcs, extraId)
                  recv_unindex()
                end

                def send_unindex(solr, arcs, extraId)
                  send_message('unindex', Unindex_args, :solr => solr, :arcs => arcs, :extraId => extraId)
                end

                def recv_unindex()
                  result = receive_message(Unindex_result)
                  raise result.ex1 unless result.ex1.nil?
                  raise result.ex2 unless result.ex2.nil?
                  raise result.ex3 unless result.ex3.nil?
                  return
                end

                def parseArcs(arcs)
                  send_parseArcs(arcs)
                  recv_parseArcs()
                end

                def send_parseArcs(arcs)
                  send_message('parseArcs', ParseArcs_args, :arcs => arcs)
                end

                def recv_parseArcs()
                  result = receive_message(ParseArcs_result)
                  raise result.ex1 unless result.ex1.nil?
                  return
                end

                def isArcParsed(arc)
                  send_isArcParsed(arc)
                  return recv_isArcParsed()
                end

                def send_isArcParsed(arc)
                  send_message('isArcParsed', IsArcParsed_args, :arc => arc)
                end

                def recv_isArcParsed()
                  result = receive_message(IsArcParsed_result)
                  return result.success unless result.success.nil?
                  raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'isArcParsed failed: unknown result')
                end

                def deleteParse(arc)
                  send_deleteParse(arc)
                  recv_deleteParse()
                end

                def send_deleteParse(arc)
                  send_message('deleteParse', DeleteParse_args, :arc => arc)
                end

                def recv_deleteParse()
                  result = receive_message(DeleteParse_result)
                  return
                end

                def setFields(solr, query, fields)
                  send_setFields(solr, query, fields)
                  recv_setFields()
                end

                def send_setFields(solr, query, fields)
                  send_message('setFields', SetFields_args, :solr => solr, :query => query, :fields => fields)
                end

                def recv_setFields()
                  result = receive_message(SetFields_result)
                  return
                end

              end

              class Processor
                include ::Thrift::Processor

                def process_index(seqid, iprot, oprot)
                  args = read_args(iprot, Index_args)
                  result = Index_result.new()
                  begin
                    @handler.index(args.solr, args.filter, args.arcs, args.extraId, args.extraFields)
                  rescue Weari::Thrift::IndexException => ex1
                    result.ex1 = ex1
                  rescue Weari::Thrift::UnparsedException => ex2
                    result.ex2 = ex2
                  rescue Weari::Thrift::BadJSONException => ex3
                    result.ex3 = ex3
                  end
                  write_result(result, oprot, 'index', seqid)
                end

                def process_clearMergeManager(seqid, iprot, oprot)
                  args = read_args(iprot, ClearMergeManager_args)
                  result = ClearMergeManager_result.new()
                  @handler.clearMergeManager(args.managerId)
                  write_result(result, oprot, 'clearMergeManager', seqid)
                end

                def process_unindex(seqid, iprot, oprot)
                  args = read_args(iprot, Unindex_args)
                  result = Unindex_result.new()
                  begin
                    @handler.unindex(args.solr, args.arcs, args.extraId)
                  rescue Weari::Thrift::IndexException => ex1
                    result.ex1 = ex1
                  rescue Weari::Thrift::UnparsedException => ex2
                    result.ex2 = ex2
                  rescue Weari::Thrift::BadJSONException => ex3
                    result.ex3 = ex3
                  end
                  write_result(result, oprot, 'unindex', seqid)
                end

                def process_parseArcs(seqid, iprot, oprot)
                  args = read_args(iprot, ParseArcs_args)
                  result = ParseArcs_result.new()
                  begin
                    @handler.parseArcs(args.arcs)
                  rescue Weari::Thrift::ParseException => ex1
                    result.ex1 = ex1
                  end
                  write_result(result, oprot, 'parseArcs', seqid)
                end

                def process_isArcParsed(seqid, iprot, oprot)
                  args = read_args(iprot, IsArcParsed_args)
                  result = IsArcParsed_result.new()
                  result.success = @handler.isArcParsed(args.arc)
                  write_result(result, oprot, 'isArcParsed', seqid)
                end

                def process_deleteParse(seqid, iprot, oprot)
                  args = read_args(iprot, DeleteParse_args)
                  result = DeleteParse_result.new()
                  @handler.deleteParse(args.arc)
                  write_result(result, oprot, 'deleteParse', seqid)
                end

                def process_setFields(seqid, iprot, oprot)
                  args = read_args(iprot, SetFields_args)
                  result = SetFields_result.new()
                  @handler.setFields(args.solr, args.query, args.fields)
                  write_result(result, oprot, 'setFields', seqid)
                end

              end

              # HELPER FUNCTIONS AND STRUCTURES

              class Index_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                SOLR = 1
                FILTER = 2
                ARCS = 3
                EXTRAID = 4
                EXTRAFIELDS = 5

                FIELDS = {
                  SOLR => {:type => ::Thrift::Types::STRING, :name => 'solr'},
                  FILTER => {:type => ::Thrift::Types::STRING, :name => 'filter'},
                  ARCS => {:type => ::Thrift::Types::LIST, :name => 'arcs', :element => {:type => ::Thrift::Types::STRING}},
                  EXTRAID => {:type => ::Thrift::Types::STRING, :name => 'extraId'},
                  EXTRAFIELDS => {:type => ::Thrift::Types::MAP, :name => 'extraFields', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRING}}}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Index_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                EX1 = 1
                EX2 = 2
                EX3 = 3

                FIELDS = {
                  EX1 => {:type => ::Thrift::Types::STRUCT, :name => 'ex1', :class => Weari::Thrift::IndexException},
                  EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => Weari::Thrift::UnparsedException},
                  EX3 => {:type => ::Thrift::Types::STRUCT, :name => 'ex3', :class => Weari::Thrift::BadJSONException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class ClearMergeManager_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                MANAGERID = 1

                FIELDS = {
                  MANAGERID => {:type => ::Thrift::Types::STRING, :name => 'managerId'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class ClearMergeManager_result
                include ::Thrift::Struct, ::Thrift::Struct_Union

                FIELDS = {

                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Unindex_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                SOLR = 1
                ARCS = 2
                EXTRAID = 3

                FIELDS = {
                  SOLR => {:type => ::Thrift::Types::STRING, :name => 'solr'},
                  ARCS => {:type => ::Thrift::Types::LIST, :name => 'arcs', :element => {:type => ::Thrift::Types::STRING}},
                  EXTRAID => {:type => ::Thrift::Types::STRING, :name => 'extraId'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class Unindex_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                EX1 = 1
                EX2 = 2
                EX3 = 3

                FIELDS = {
                  EX1 => {:type => ::Thrift::Types::STRUCT, :name => 'ex1', :class => Weari::Thrift::IndexException},
                  EX2 => {:type => ::Thrift::Types::STRUCT, :name => 'ex2', :class => Weari::Thrift::UnparsedException},
                  EX3 => {:type => ::Thrift::Types::STRUCT, :name => 'ex3', :class => Weari::Thrift::BadJSONException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class ParseArcs_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                ARCS = 1

                FIELDS = {
                  ARCS => {:type => ::Thrift::Types::LIST, :name => 'arcs', :element => {:type => ::Thrift::Types::STRING}}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class ParseArcs_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                EX1 = 1

                FIELDS = {
                  EX1 => {:type => ::Thrift::Types::STRUCT, :name => 'ex1', :class => Weari::Thrift::ParseException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class IsArcParsed_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                ARC = 1

                FIELDS = {
                  ARC => {:type => ::Thrift::Types::STRING, :name => 'arc'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class IsArcParsed_result
                include ::Thrift::Struct, ::Thrift::Struct_Union
                SUCCESS = 0

                FIELDS = {
                  SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class DeleteParse_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                ARC = 1

                FIELDS = {
                  ARC => {:type => ::Thrift::Types::STRING, :name => 'arc'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class DeleteParse_result
                include ::Thrift::Struct, ::Thrift::Struct_Union

                FIELDS = {

                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class SetFields_args
                include ::Thrift::Struct, ::Thrift::Struct_Union
                SOLR = 1
                QUERY = 2
                FIELDS = 3

                FIELDS = {
                  SOLR => {:type => ::Thrift::Types::STRING, :name => 'solr'},
                  QUERY => {:type => ::Thrift::Types::STRING, :name => 'query'},
                  FIELDS => {:type => ::Thrift::Types::MAP, :name => 'fields', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRING}}}
                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

              class SetFields_result
                include ::Thrift::Struct, ::Thrift::Struct_Union

                FIELDS = {

                }

                def struct_fields; FIELDS; end

                def validate
                end

                ::Thrift::Struct.generate_accessors self
              end

            end

          end
        end
